[TOC]

## Solution

---

#### Approach 1: Sort by Row

**Intuition**

By iterating through the string from left to right, we can easily determine which row in the Zig-Zag pattern that a character belongs to.

**Algorithm**

We can use $\text{min}( \text{numRows}, \text{len}(s))$ lists to represent the non-empty rows of the Zig-Zag Pattern.

Iterate through $s$ from left to right, appending each character to the appropriate row. The appropriate row can be tracked using two variables: the current row and the current direction.

The current direction changes only when we moved up to the topmost row or moved down to the bottommost row.

<iframe src="https://leetcode.com/playground/F7ATKV4h/shared" frameBorder="0" width="100%" height="446" name="F7ATKV4h"></iframe>

**Complexity Analysis**

* Time Complexity: $O(n)$, where $n == \text{len}(s)$
* Space Complexity: $O(n)$

<br />

---

#### Approach 2: Visit by Row

**Intuition**

Visit the characters in the same order as reading the Zig-Zag pattern line by line.

**Algorithm**

Visit all characters in row 0 first, then row 1, then row 2, and so on...

For all whole numbers $k$,

- Characters in row $0$ are located at indexes $k \; (2 \cdot \text{numRows} - 2)$
- Characters in row $\text{numRows}-1$ are located at indexes $k \; (2 \cdot \text{numRows} - 2) + \text{numRows} - 1$
- Characters in inner row $i$ are located at indexes $k \; (2 \cdot \text{numRows}-2)+i$ and $(k+1)(2 \cdot \text{numRows}-2)- i$.

<iframe src="https://leetcode.com/playground/Deg3hGi4/shared" frameBorder="0" width="100%" height="395" name="Deg3hGi4"></iframe>

**Complexity Analysis**

* Time Complexity: $O(n)$, where $n == \text{len}(s)$. Each index is visited once.
* Space Complexity: $O(n)$. For the cpp implementation, $O(1)$ if return string is not considered extra space.

